{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/SortType.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onBtnClick","getIcon","target","children","handleOnFocus","event","className","handleOnBlur","map","todo","id","completed","classNames","title","type","onClick","onFocus","onBlur","TodoFilter","query","onFilterChange","onSearchChange","onReset","onChange","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SortType","TodoModal","modalInfo","useState","user","setUser","userId","useEffect","getUser","userInfo","href","email","name","App","allTodos","setTodos","filter","setFilter","setQuery","setModalInfo","isInitialized","setIsInitialized","getModalInfo","visibleTodos","useMemo","filterCase","searchQuery","searchedTodo","toLowerCase","includes","trim","ACTIVE","COMPLETED","getVisibleTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aabe043a.chunk.js","sourcesContent":["import React, { FocusEvent } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  onBtnClick: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, onBtnClick }) => {\n  const getIcon = (target: HTMLButtonElement) => target.children[0].children[0];\n\n  const handleOnFocus = (event: FocusEvent<HTMLButtonElement>) => {\n    const icon = getIcon(event.target);\n\n    icon.className = 'far fa-eye-slash';\n  };\n\n  const handleOnBlur = (event: FocusEvent<HTMLButtonElement>) => {\n    const icon = getIcon(event.target);\n\n    icon.className = 'far fa-eye';\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n            <td className=\"is-vcentered\">\n              {todo.id}\n            </td>\n\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  onBtnClick(todo);\n                }}\n                onFocus={handleOnFocus}\n                onBlur={handleOnBlur}\n              >\n                <span className=\"icon\">\n                  <i className=\"far fa-eye\" />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { ChangeEvent } from 'react';\n\ntype Props = {\n  query: string,\n  onFilterChange: (event: ChangeEvent<HTMLSelectElement>) => void,\n  onSearchChange: (event: ChangeEvent<HTMLInputElement>) => void,\n  onReset: () => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onFilterChange,\n  onSearchChange,\n  onReset,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select data-cy=\"statusSelect\" onChange={onFilterChange}>\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        value={query}\n        className=\"input\"\n        placeholder=\"Search...\"\n        onChange={onSearchChange}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            aria-label=\"delete\"\n            className=\"delete\"\n            onClick={onReset}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SortType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  modalInfo: Todo,\n  onClick: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ modalInfo, onClick }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = modalInfo;\n\n  useEffect(() => {\n    getUser(userId).then(userInfo => setUser(userInfo));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onClick()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\n// eslint-disable-next-line object-curly-newline\nimport React, { ChangeEvent, useEffect, useMemo, useState } from 'react';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { SortType } from './types/SortType';\n\nconst getVisibleTodos = (filterCase: string, todos: Todo[], searchQuery: string) => {\n  const searchedTodo = todos.filter(todo => todo.title.toLowerCase().includes(searchQuery.trim().toLowerCase()));\n\n  switch (filterCase) {\n    case SortType.ACTIVE:\n      return searchedTodo.filter(todo => !todo.completed);\n\n    case SortType.COMPLETED:\n      return searchedTodo.filter(todo => todo.completed);\n\n    default:\n      return searchedTodo;\n  }\n};\n\nexport const App: React.FC = () => {\n  const [allTodos, setTodos] = useState<Todo[]>([]);\n  const [filter, setFilter] = useState('all');\n  const [query, setQuery] = useState('');\n  const [modalInfo, setModalInfo] = useState<Todo | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  useEffect(() => {\n    getTodos().then(todos => {\n      setTodos(todos);\n      setIsInitialized(true);\n    });\n  }, []);\n\n  const getModalInfo = (todo: Todo | null = null) => {\n    setModalInfo(todo);\n  };\n\n  const filterChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setFilter(event.target.value);\n  };\n\n  const searchChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const searchReset = () => setQuery('');\n\n  const visibleTodos = useMemo(() => (\n    getVisibleTodos(filter, allTodos, query)\n  ), [filter, allTodos, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onFilterChange={filterChange}\n                onSearchChange={searchChange}\n                onReset={searchReset}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isInitialized ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  onBtnClick={getModalInfo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {modalInfo && (\n        <TodoModal\n          modalInfo={modalInfo}\n          onClick={getModalInfo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}